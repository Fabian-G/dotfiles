#!/bin/bash
# Author: Fabian-G
# This script is designed for the use with cmus to show a notification on status changes(like next song etc...)
# By default it will show the album art, the title and the artist.

# Install: Put the scipt somewhere on your PATH and then open cmus and enter
#           :set status_display_program=playbackstatus
#           
#   Additionally if you want to use the "don't show notification if cmus is focused"-feature you need to
#   choose a unique string for the window title in order to avoid
#   mix-ups use :set format_title=.... for that
#   After hat enter that string into the variable $TITLE_STRING below.
#   
#   If you don't want that feature just leave $TITLE_STRING empty
#
# Note that this script won't show a notification if status is "stopped" since this would trigger a notification on startup
# If you want a notification on stopped, comment the corresponding if case at the bottom


# Id for the notifications if you use dunstify in order to update existing notifications instead
# of showing new ones
msgId="56283473"

# Caching directory for created album art thumbnails
CACHE_DIR="$HOME/.cache/cmus-notify/"

# Defines which icon to show if the currently playing track doesn't have embedded album art
DEFAULT_ICON="emblem-music-symbolic.symbolic"

# This defines the regex we will look for in the window titles when checking if cmus is focusd.
# Needed for the "don't show notification if cmus is focused"-feature 
TITLE_STRING="Music Player:"
#TITLE_STRING=""

# Use dunstify if available and pass the message id
notify_cmd=$(which dunstify)
if [[ "$?" == 0 ]]; then
    notify_cmd="${notify_cmd} -r $msgId"
else
    notify_cmd=$(which notify-send)
fi

# Creates the album art thumbnail or returns a default thumbnail if the album art is missing
function getAlbumArt() {
    # Use ffmpegthumbnailer if your disk space is holy.
    ffmpegthumbnailer -m -i "$_file" -o "${CACHE_DIR}/${_artist}-${_album}.png" &> /dev/null
    #ffmpeg -i "$_file" "${CACHE_DIR}/${_artist}-${_album}.png" &> /dev/null
    if [[ "$?" == "0" ]]; then
        echo "${CACHE_DIR}/${_artist}-${_album}.png"
    else
        # Remove dead thumbnail if ffmpegthumbnailer was used since it will
        # create a file on failure
        [[ -f "${CACHE_DIR}/${_artist}-${_album}.png" ]] &&\
            rm "${CACHE_DIR}/${_artist}-${_album}.png" &> /dev/null
        echo "$DEFAULT_ICON"
    fi
}

# Shows the notification and checks if the album art thumbnail is already cached.
function showNotification() {
    if [[ -f "${CACHE_DIR}/${_artist}-${_album}.png" && -n "$_file" ]]; then
        icon="${CACHE_DIR}/${_artist}-${_album}.png"
    elif [[ -n "$_file" ]]; then
        icon=$(getAlbumArt)
    fi
    $notify_cmd -a cmus -i "$icon" -u normal "$1" "${_artist}-${_title}"
}

# Exit if cmus is focused. 
# This method of determining if cmus is active has room for improvement
# It relies on the title string of the cmus window being unique, so use :set format_title=... wisely.
activeId="$(xprop -root _NET_ACTIVE_WINDOW | awk '{print $(NF)}')"
cmusId=$(wmctrl -l | grep -E "$TITLE_STRING" | grep -v grep | head -1 | awk '{print $1}')
if [[ "$cmusId" -eq "$activeId" ]]; then
    exit 0
fi

# Create cache directory
if [[ ! -d "$CACHE_DIR" ]]; then
    mkdir -p  "$CACHE_DIR"
fi

# Read the provided metadata
_artist="Unknown"
_status="Unknown"
_album="Unknown"
_title="Unknown"
_file=""
while test $# -ge 2; do
    eval _$1=\"$2\"
    shift;shift
done

# Add custom Summary strings for some notifications
if [[ "$_status" == "playing" ]]; then
    showNotification "Now playing:"
elif [[ "$_status" == "paused" ]]; then
    showNotification "Playback paused"
elif [[ "$_status" == "stopped" ]]; then
    # Don' react on stopped to avoid notification on startup
    echo -n
else
    showNotification "$_status"
fi
